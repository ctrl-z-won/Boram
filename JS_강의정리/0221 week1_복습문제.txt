
1. 일급 객체(first-class object)란?
	: 함수도 객체가 될 수 있다
	-> 함수에 파라미터로 함수가 들어갈 수 있고, 함수를 리턴할 수 있다
	-> 객체 안이나 배열 내부에서도 함수, 객체를 넣는 것이 가능하다.

2. 원시 타입과 객체 타입의 차이점? (변수 할당 방식에 있어서의 차이점)
	: 원시타입은 변수에 할당 될 때, 그 값 그대로 변수에 저장됨. (call-by-value)
	: 객체타입은 변수에 할당 될 때, 해당 객체가 저장되어 있는 메모리 주소가 변수에 할당됨 (call-by-reference)

3. 호이스팅은 무엇인가?
	: 모든 선언문이 해당 스코프의 맨 앞으로 옮겨진 것처럼 동작하는 특성

4. call-by-value vs call-by-reference
	: call-by-value 변수에 할당 될 때 그 값 그대로 변수에 저장
	: call-by-reference 변수에 할당되면 해당 객체가 저장되어 있는 메모리 주소를 변수에 할당 -> 할당받은 변수는 객체의 메모리 주소를 '참조'함

5. 호이스팅이란?
	: 모든 선언문이 해당 스코프의 맨 앞으로 옮겨진 것처럼 동작하는 특성

6. 변수 호이스팅 vs 함수 호이스팅
	: 변수 호이스팅 - var키워드로 사용된 변수가 JS엔진이 스크립트를 로딩시키는 시점에 바로 초기화함.
			- 함수호스팅과 다르게 VO에 변수를 바로 할당하지 않고, runtime에서 해석되고 실행됨
	: 함수 호이스팅 - 함수선언문으로 정의된 함수가 JS엔진이 스크립트를 로딩시키는 시점에 바로 초기화함.
			- 초기화 후 VO에 저장함. 즉, 초기화, 선언, 할당이 한번에 이루어 져 함수 선언문의 경우엔 함수 선언 위치와 관계없이 소스 내 어디서든 호출할 수 있음.

7. 함수 표현식이란? 함수 표현식 예제 코드 작성해보기
	: 함수표현식이란 익명 함수 선언문을 '변수'로 할당하여 사용하는 것
	: var squre=function(number){}
	: 함수를 변수에 할당하였으므로 '변수 호이스팅'에 적용됨. -> 초기화, 변수 선언만 먼저 되고, JS엔진이 스크립트를 읽을 때 해당 위치에서 동시에 할당이 되어 그 뒤에서부터 사용할 수 있게됨.

8. 전역 스코프 vs 지역 스코프, 전역 변수 vs 지역 변수
	: 전역 스코프-코드 어디에서든지 참조할 수 있다.
	: 지역 스코프-함수 코드 블록이 만든 스코프로 함수 자신 및 하위 함수에서만 참조할 수 있다.
	: 전역변수-전역(window)에서 선언된 변수, 어디에서든 참조할 수 있다.
	: 지역변수-함수 내에서 선언된 변수로 해당 함수와 그 하위 함수에서만 참조할 수 있다.


9. 블록 레벨 스코프란?
	: 코드 블록 내에서 독립적인 스코프가 생기는 것(let, const)
	

10. 함수 레벨 스코프란?
	: 함수 코드 블록 내에서 독립적인 스코프가 생기는 것

11. 렉시컬 스코프?
	: 선언 방식으로 스코프를 따르는 경우 렉시컬 스코프(정적)라고 한다.
	 cf) 함수 호출 방식으로 스코프를 결정하는 것은 동적 스코프라고 한다.

12. 렉시컬 스코프는 스코프를 어떻게 결정하나?
	: 함수를 어디에 선언하였는지에 따라 결정됨. -> 함수를 어디서 실행했느냐와는 관계없이 함수를 선언한 시점으로 상위 스코프가 결정된다.